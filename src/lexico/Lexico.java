/* The following code was generated by JFlex 1.4.3 on 3/6/20 4:00 PM */

package lexico;
import static lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/6/20 4:00 PM from the specification file
 * <tt>src/lexico/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\34\1\45\1\4\2\0"+
    "\1\41\1\57\1\0\1\56\1\55\1\40\1\36\1\53\1\37\1\35"+
    "\1\33\12\2\1\54\1\46\1\44\1\42\1\43\2\0\32\1\1\50"+
    "\1\32\1\47\3\0\1\12\1\1\1\16\1\22\1\20\1\17\1\11"+
    "\1\25\1\14\1\26\1\1\1\24\1\13\1\15\1\10\1\6\1\1"+
    "\1\7\1\23\1\21\1\27\2\1\1\30\1\31\1\1\1\52\1\60"+
    "\1\51\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\12\2"+
    "\1\4\1\6\1\4\1\5\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\1\1\0\1\1"+
    "\2\2\3\1\1\30\1\1\12\2\1\31\2\2\1\32"+
    "\2\4\4\1\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\3\2\1\42\1\0\1\30\7\2\1\43\11\2"+
    "\1\0\1\30\1\0\1\2\1\44\2\2\1\45\10\2"+
    "\1\46\4\2\2\30\1\2\1\47\12\2\1\50\4\2"+
    "\1\51\1\52\2\2\1\53\1\2\1\54\1\2\2\1"+
    "\1\55\1\1\1\56\2\1\1\57\1\60\1\61\1\62"+
    "\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\u058d\0\61\0\61\0\u05be\0\u05ef"+
    "\0\61\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\365\0\u0715"+
    "\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d"+
    "\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0a25"+
    "\0\u0620\0\u0405\0\u0436\0\u0467\0\u0498\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\u0a56\0\u0a87\0\u0ab8\0\u06e4"+
    "\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0a56\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0ae9\0\u0e8c\0\u0ebd\0\u0dc8"+
    "\0\u0eee\0\u0f1f\0\u0dc8\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014"+
    "\0\u1045\0\u1076\0\u10a7\0\u0dc8\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u0620\0\u0e5b\0\u119c\0\u113a\0\u11cd\0\u11fe\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u113a\0\u13b7"+
    "\0\u13e8\0\u1419\0\u144a\0\u13b7\0\u13b7\0\u147b\0\u14ac\0\u13b7"+
    "\0\u14dd\0\u13b7\0\u150e\0\u13b7\0\u153f\0\u13b7\0\u1570\0\u13b7"+
    "\0\u15a1\0\u15d2\0\u13b7\0\u13b7\0\u13b7\0\u13b7\0\u13b7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\3\3\1\12\1\13\1\3\1\14\1\15\1\16\2\3"+
    "\1\17\1\20\1\21\4\3\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\4\51\1\52\1\0\26\51\1\0"+
    "\25\51\1\53\1\54\1\51\1\52\1\0\24\53\2\51"+
    "\1\0\1\55\24\51\1\55\1\4\1\51\1\52\1\0"+
    "\24\55\2\51\1\0\1\56\26\51\1\5\1\52\1\7"+
    "\26\51\1\7\24\51\4\57\1\60\1\0\24\57\1\61"+
    "\26\57\3\0\1\7\1\0\1\7\26\0\1\7\24\0"+
    "\1\51\1\53\1\54\1\51\1\52\1\0\1\53\1\62"+
    "\1\63\21\53\2\51\1\0\1\55\24\51\1\53\1\54"+
    "\1\51\1\52\1\0\12\53\1\64\11\53\2\51\1\0"+
    "\1\55\24\51\1\53\1\54\1\51\1\52\1\0\6\53"+
    "\1\65\15\53\2\51\1\0\1\55\24\51\1\53\1\54"+
    "\1\51\1\52\1\0\7\53\1\66\14\53\2\51\1\0"+
    "\1\55\24\51\1\53\1\54\1\51\1\52\1\0\4\53"+
    "\1\67\17\53\2\51\1\0\1\55\24\51\1\53\1\54"+
    "\1\51\1\52\1\0\6\53\1\70\15\53\2\51\1\0"+
    "\1\55\24\51\1\53\1\54\1\51\1\52\1\0\7\53"+
    "\1\71\10\53\1\72\3\53\2\51\1\0\1\55\24\51"+
    "\1\53\1\54\1\51\1\52\1\0\4\53\1\73\1\53"+
    "\1\74\15\53\2\51\1\0\1\55\24\51\1\53\1\54"+
    "\1\51\1\52\1\0\6\53\1\75\15\53\2\51\1\0"+
    "\1\55\24\51\1\53\1\54\1\51\1\52\1\0\4\53"+
    "\1\76\17\53\2\51\1\0\1\55\23\51\5\22\1\0"+
    "\53\22\4\51\1\52\1\0\25\51\1\77\1\0\24\51"+
    "\3\0\1\7\1\0\1\7\26\0\1\7\1\100\23\0"+
    "\1\51\2\55\1\51\1\52\1\0\24\55\2\51\1\101"+
    "\1\55\27\51\1\52\1\0\26\51\1\0\1\51\1\102"+
    "\26\51\1\52\1\0\26\51\1\0\2\51\1\103\25\51"+
    "\1\52\1\0\26\51\1\0\3\51\1\104\24\51\1\52"+
    "\1\0\26\51\1\0\4\51\1\105\23\51\1\52\1\0"+
    "\26\51\1\0\5\51\1\106\22\51\1\52\1\0\26\51"+
    "\1\0\5\51\1\107\22\51\1\52\1\0\26\51\1\0"+
    "\5\51\1\110\22\51\1\52\1\0\26\51\1\0\5\51"+
    "\1\111\22\51\1\52\1\0\26\51\1\0\5\51\1\112"+
    "\22\51\1\52\1\0\26\51\1\0\22\51\1\113\5\51"+
    "\1\52\1\0\26\51\1\0\23\51\1\114\61\0\1\51"+
    "\1\115\1\116\1\51\1\52\1\0\24\115\2\51\1\0"+
    "\1\55\24\51\1\117\1\116\1\51\1\52\1\0\24\117"+
    "\2\51\1\0\1\55\24\51\2\55\1\51\1\52\1\0"+
    "\24\55\2\51\1\0\1\55\24\51\1\55\1\120\1\51"+
    "\1\52\1\0\24\55\2\51\1\0\1\55\23\51\4\0"+
    "\1\121\54\0\4\57\1\122\1\0\24\57\1\61\26\57"+
    "\1\51\1\115\1\116\1\51\1\52\1\0\2\115\1\123"+
    "\21\115\2\51\1\0\1\55\24\51\1\115\1\116\1\51"+
    "\1\52\1\0\15\115\1\124\6\115\2\51\1\0\1\55"+
    "\24\51\1\115\1\116\1\51\1\52\1\0\1\125\3\115"+
    "\1\126\17\115\2\51\1\0\1\55\24\51\1\115\1\116"+
    "\1\51\1\52\1\0\12\115\1\127\11\115\2\51\1\0"+
    "\1\55\24\51\1\115\1\116\1\51\1\52\1\0\6\115"+
    "\1\130\15\115\2\51\1\0\1\55\24\51\1\115\1\116"+
    "\1\51\1\52\1\0\14\115\1\131\7\115\2\51\1\0"+
    "\1\55\24\51\1\115\1\116\1\51\1\52\1\0\7\115"+
    "\1\132\14\115\2\51\1\0\1\55\24\51\1\115\1\116"+
    "\1\51\1\52\1\0\13\115\1\133\10\115\2\51\1\0"+
    "\1\55\24\51\1\115\1\116\1\51\1\52\1\0\12\115"+
    "\1\134\11\115\2\51\1\0\1\55\24\51\1\115\1\116"+
    "\1\51\1\52\1\0\16\115\1\135\5\115\2\51\1\0"+
    "\1\55\24\51\1\115\1\116\1\51\1\52\1\0\7\115"+
    "\1\136\14\115\2\51\1\0\1\55\24\51\1\115\1\116"+
    "\1\51\1\52\1\0\5\115\1\137\16\115\2\51\1\0"+
    "\1\55\24\51\1\115\1\116\1\51\1\52\1\0\15\115"+
    "\1\140\6\115\2\51\1\0\1\55\23\51\5\77\1\0"+
    "\53\77\34\0\1\101\24\0\1\51\1\141\1\142\1\51"+
    "\1\52\1\0\24\141\2\51\1\0\1\55\24\51\1\143"+
    "\1\142\1\51\1\52\1\0\24\143\2\51\1\0\1\55"+
    "\24\51\2\143\1\51\1\52\1\0\24\143\2\51\1\0"+
    "\24\51\4\121\1\60\1\0\53\121\4\144\1\145\1\0"+
    "\24\144\1\146\26\144\1\51\1\141\1\142\1\51\1\52"+
    "\1\0\3\141\1\147\4\141\1\150\13\141\2\51\1\0"+
    "\1\55\24\51\1\141\1\142\1\51\1\52\1\0\22\141"+
    "\1\151\1\141\2\51\1\0\1\55\24\51\1\141\1\142"+
    "\1\51\1\52\1\0\12\141\1\152\11\141\2\51\1\0"+
    "\1\55\24\51\1\141\1\142\1\51\1\52\1\0\16\141"+
    "\1\153\5\141\2\51\1\0\1\55\24\51\1\141\1\142"+
    "\1\51\1\52\1\0\7\141\1\154\14\141\2\51\1\0"+
    "\1\55\24\51\1\141\1\142\1\51\1\52\1\0\10\141"+
    "\1\155\13\141\2\51\1\0\1\55\24\51\1\141\1\142"+
    "\1\51\1\52\1\0\12\141\1\156\11\141\2\51\1\0"+
    "\1\55\24\51\1\141\1\142\1\51\1\52\1\0\1\141"+
    "\1\157\1\160\7\141\1\161\11\141\2\51\1\0\1\55"+
    "\24\51\1\141\1\142\1\51\1\52\1\0\10\141\1\162"+
    "\13\141\2\51\1\0\1\55\24\51\1\141\1\142\1\51"+
    "\1\52\1\0\6\141\1\163\15\141\2\51\1\0\1\55"+
    "\24\51\1\141\1\142\1\51\1\52\1\0\2\141\1\164"+
    "\21\141\2\51\1\0\1\55\24\51\1\141\1\142\1\51"+
    "\1\52\1\0\1\165\23\141\2\51\1\0\1\55\24\51"+
    "\1\141\1\142\1\51\1\52\1\0\13\141\1\166\10\141"+
    "\2\51\1\0\1\55\24\51\2\167\1\51\1\52\1\0"+
    "\24\167\2\51\1\0\1\55\24\51\1\170\1\167\1\51"+
    "\1\52\1\0\24\170\2\51\1\0\1\55\24\51\2\170"+
    "\1\51\1\52\1\0\24\170\2\51\1\0\24\51\4\144"+
    "\1\171\1\0\24\144\1\146\32\144\1\172\1\0\24\144"+
    "\1\146\26\144\1\51\2\167\1\51\1\52\1\0\1\167"+
    "\1\173\22\167\2\51\1\0\1\55\24\51\2\167\1\51"+
    "\1\52\1\0\23\167\1\174\2\51\1\0\1\55\24\51"+
    "\2\167\1\51\1\52\1\0\13\167\1\175\10\167\2\51"+
    "\1\0\1\55\24\51\2\167\1\51\1\52\1\0\13\167"+
    "\1\176\10\167\2\51\1\0\1\55\24\51\2\167\1\51"+
    "\1\52\1\0\6\167\1\177\15\167\2\51\1\0\1\55"+
    "\24\51\2\167\1\51\1\52\1\0\7\167\1\200\14\167"+
    "\2\51\1\0\1\55\24\51\2\167\1\51\1\52\1\0"+
    "\4\167\1\201\17\167\2\51\1\0\1\55\24\51\2\167"+
    "\1\51\1\52\1\0\7\167\1\202\14\167\2\51\1\0"+
    "\1\55\24\51\2\167\1\51\1\52\1\0\1\167\1\203"+
    "\22\167\2\51\1\0\1\55\24\51\2\167\1\51\1\52"+
    "\1\0\21\167\1\204\2\167\2\51\1\0\1\55\24\51"+
    "\2\167\1\51\1\52\1\0\14\167\1\205\7\167\2\51"+
    "\1\0\1\55\24\51\2\167\1\51\1\52\1\0\6\167"+
    "\1\206\15\167\2\51\1\0\1\55\24\51\2\167\1\51"+
    "\1\52\1\0\4\167\1\207\17\167\2\51\1\0\1\55"+
    "\24\51\2\210\1\51\1\52\1\0\24\210\2\51\1\0"+
    "\1\55\24\51\2\210\1\51\1\52\1\0\24\210\2\51"+
    "\1\0\25\51\2\210\1\51\1\52\1\0\4\210\1\211"+
    "\17\210\2\51\1\0\1\55\24\51\2\210\1\51\1\52"+
    "\1\0\6\210\1\212\15\210\2\51\1\0\1\55\24\51"+
    "\2\210\1\51\1\52\1\0\1\210\1\213\22\210\2\51"+
    "\1\0\1\55\24\51\2\210\1\51\1\52\1\0\2\210"+
    "\1\214\21\210\2\51\1\0\1\55\24\51\2\210\1\51"+
    "\1\52\1\0\4\210\1\215\17\210\2\51\1\0\1\55"+
    "\24\51\2\210\1\51\1\52\1\0\14\210\1\216\7\210"+
    "\2\51\1\0\1\55\24\51\2\210\1\51\1\52\1\0"+
    "\10\210\1\217\13\210\2\51\1\0\1\55\24\51\2\210"+
    "\1\51\1\52\1\0\2\210\1\220\21\210\2\51\1\0"+
    "\1\55\24\51\2\210\1\51\1\52\1\0\13\210\1\221"+
    "\10\210\2\51\1\0\1\55\24\51\2\210\1\51\1\52"+
    "\1\0\4\210\1\222\17\210\2\51\1\0\1\55\24\51"+
    "\2\210\1\51\1\52\1\0\4\210\1\223\17\210\2\51"+
    "\1\0\1\55\23\51\4\224\1\52\1\0\26\224\1\0"+
    "\30\224\1\52\1\0\5\224\1\225\20\224\1\0\30\224"+
    "\1\52\1\0\1\224\1\226\24\224\1\0\30\224\1\52"+
    "\1\0\4\224\1\227\21\224\1\0\30\224\1\52\1\0"+
    "\4\224\1\230\21\224\1\0\30\224\1\52\1\0\12\224"+
    "\1\231\13\224\1\0\30\224\1\52\1\0\4\224\1\232"+
    "\21\224\1\0\30\224\1\52\1\0\1\224\1\233\24\224"+
    "\1\0\30\224\1\52\1\0\4\224\1\234\21\224\1\0"+
    "\30\224\1\52\1\0\15\224\1\235\10\224\1\0\30\224"+
    "\1\52\1\0\15\224\1\236\10\224\1\0\30\224\1\52"+
    "\1\0\1\224\1\237\24\224\1\0\24\224";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5635];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\47\1\1\0\1\11\26\1\1\11\17\1\1\0"+
    "\22\1\1\0\1\1\1\0\22\1\1\11\46\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int getLine() {
    return yyline;
    }
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 124) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 52: break;
        case 10: 
          { lexeme=yytext(); return Modulo;
          }
        case 53: break;
        case 18: 
          { lexeme=yytext(); return CierraLlave;
          }
        case 54: break;
        case 13: 
          { lexeme=yytext(); return Menor;
          }
        case 55: break;
        case 28: 
          { lexeme=yytext(); return MayorIgual;
          }
        case 56: break;
        case 15: 
          { lexeme=yytext(); return PuntoYComa;
          }
        case 57: break;
        case 30: 
          { lexeme=yytext(); return Diferente;
          }
        case 58: break;
        case 40: 
          { lexeme=yytext(); return hasta;
          }
        case 59: break;
        case 39: 
          { lexeme=yytext(); return posxy;
          }
        case 60: break;
        case 25: 
          { lexeme=yytext(); return si;
          }
        case 61: break;
        case 21: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 62: break;
        case 41: 
          { lexeme=yytext(); return inicio;
          }
        case 63: break;
        case 48: 
          { lexeme=yytext(); return programa;
          }
        case 64: break;
        case 16: 
          { lexeme=yytext(); return CierraCorchete;
          }
        case 65: break;
        case 29: 
          { lexeme=yytext(); return MenorIgual;
          }
        case 66: break;
        case 47: 
          { lexeme=yytext(); return limpiar;
          }
        case 67: break;
        case 44: 
          { lexeme=yytext(); return salida;
          }
        case 68: break;
        case 19: 
          { lexeme=yytext(); return AbreLlave;
          }
        case 69: break;
        case 50: 
          { lexeme=yytext(); return entonces;
          }
        case 70: break;
        case 17: 
          { lexeme=yytext(); return AbreCorchete;
          }
        case 71: break;
        case 6: 
          { lexeme=yytext(); return Division;
          }
        case 72: break;
        case 35: 
          { lexeme=yytext(); return fin;
          }
        case 73: break;
        case 26: 
          { lexeme=yytext(); return Comentario;
          }
        case 74: break;
        case 5: 
          { /* Ignore */
          }
        case 75: break;
        case 23: 
          { lexeme=yytext(); return AbreParentesis;
          }
        case 76: break;
        case 14: 
          { lexeme=yytext(); return Negacion;
          }
        case 77: break;
        case 34: 
          { lexeme=yytext(); return Reales;
          }
        case 78: break;
        case 24: 
          { lexeme=yytext(); return Cadena;
          }
        case 79: break;
        case 32: 
          { lexeme=yytext(); return LogicoAND;
          }
        case 80: break;
        case 3: 
          { lexeme=yytext(); return Enteros;
          }
        case 81: break;
        case 51: 
          { lexeme=yytext(); return ejecutar;
          }
        case 82: break;
        case 38: 
          { lexeme=yytext(); return sino;
          }
        case 83: break;
        case 42: 
          { lexeme=yytext(); return cadena;
          }
        case 84: break;
        case 8: 
          { lexeme=yytext(); return Resta;
          }
        case 85: break;
        case 12: 
          { lexeme=yytext(); return Mayor;
          }
        case 86: break;
        case 46: 
          { lexeme=yytext(); return entrada;
          }
        case 87: break;
        case 27: 
          { lexeme=yytext(); return IgualIgual;
          }
        case 88: break;
        case 49: 
          { lexeme=yytext(); return mientras;
          }
        case 89: break;
        case 37: 
          { lexeme=yytext(); return real;
          }
        case 90: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 91: break;
        case 9: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 92: break;
        case 22: 
          { lexeme=yytext(); return CierraParentesis;
          }
        case 93: break;
        case 45: 
          { lexeme=yytext(); return repetir;
          }
        case 94: break;
        case 33: 
          { lexeme=yytext(); return LogicoOR;
          }
        case 95: break;
        case 31: 
          { lexeme=yytext(); return DosPuntosIgual;
          }
        case 96: break;
        case 11: 
          { lexeme=yytext(); return Igual;
          }
        case 97: break;
        case 20: 
          { lexeme=yytext(); return Coma;
          }
        case 98: break;
        case 4: 
          { /*Ignore*/
          }
        case 99: break;
        case 43: 
          { lexeme=yytext(); return entero;
          }
        case 100: break;
        case 36: 
          { lexeme=yytext(); return proc;
          }
        case 101: break;
        case 7: 
          { lexeme=yytext(); return Suma;
          }
        case 102: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
