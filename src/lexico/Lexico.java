/* The following code was generated by JFlex 1.4.3 on 3/6/20 11:17 AM */

package lexico;
import static lexico.Token.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/6/20 11:17 AM from the specification file
 * <tt>src/lexico/Lexico.flex</tt>
 */
class Lexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\43\1\64\1\4\3\0"+
    "\1\62\1\0\1\61\1\60\1\47\1\45\1\56\1\46\1\44\1\41"+
    "\12\2\1\57\1\53\1\52\1\50\1\51\2\0\1\15\1\34\1\20"+
    "\1\40\1\24\1\23\1\30\1\35\1\21\1\36\1\1\1\26\1\31"+
    "\1\22\1\17\1\6\1\1\1\16\1\27\1\25\1\37\1\14\1\1"+
    "\1\32\1\33\1\1\1\55\1\42\1\54\3\0\1\12\5\1\1\11"+
    "\5\1\1\13\1\1\1\10\2\1\1\7\10\1\1\0\1\63\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\4\14\2"+
    "\1\6\1\7\1\4\1\5\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\1\1\25\1\0\1\1\2\2\3\1\1\26"+
    "\1\1\6\2\1\27\7\2\1\30\4\2\3\4\3\1"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\3\2\1\37"+
    "\1\0\1\26\2\2\1\40\1\2\1\41\3\2\1\42"+
    "\15\2\1\0\1\26\1\0\1\2\1\43\1\44\1\2"+
    "\1\45\5\2\1\46\1\47\3\2\1\50\2\2\2\26"+
    "\11\2\1\51\2\2\1\52\1\53\1\54\3\2\1\55"+
    "\1\2\3\1\1\56\1\57\1\1\1\60\1\61\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\65\0\u0562\0\u0597\0\65\0\65\0\65"+
    "\0\65\0\u05cc\0\65\0\65\0\u0601\0\u0636\0\65\0\65"+
    "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0109\0\u0774\0\u07a9"+
    "\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u06a0\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u066b\0\u04c3\0\u04f8"+
    "\0\u052d\0\65\0\65\0\65\0\65\0\65\0\65\0\u0c02"+
    "\0\u0c37\0\u0c6c\0\u073f\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0c02"+
    "\0\u0d75\0\u0c02\0\u0daa\0\u0ddf\0\u0e14\0\u0c02\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u0ca1\0\u112f\0\u1164\0\u105b"+
    "\0\u105b\0\u1199\0\u105b\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u105b\0\u105b\0\u12d7\0\u130c\0\u1341\0\u105b\0\u1376\0\u13ab"+
    "\0\u066b\0\u10fa\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u14e9"+
    "\0\u151e\0\u1553\0\u1588\0\u1376\0\u15bd\0\u15f2\0\u15bd\0\u15bd"+
    "\0\u15bd\0\u1627\0\u165c\0\u1691\0\u15bd\0\u16c6\0\u15bd\0\u16fb"+
    "\0\u1730\0\u15bd\0\u15bd\0\u1765\0\u15bd\0\u15bd\0\u15bd";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\5\3"+
    "\1\11\1\12\1\13\1\14\1\3\1\15\1\3\1\16"+
    "\1\17\1\3\1\20\1\21\1\3\1\22\3\3\1\23"+
    "\3\3\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\4\50\1\51\1\0"+
    "\35\50\1\0\22\50\1\52\1\53\1\50\1\51\1\0"+
    "\33\52\2\50\1\0\1\54\21\50\1\54\1\4\1\50"+
    "\1\51\1\0\33\54\2\50\1\0\1\55\23\50\1\5"+
    "\1\51\1\7\35\50\1\7\21\50\4\56\1\57\1\0"+
    "\34\56\1\60\22\56\3\0\1\7\1\0\1\7\35\0"+
    "\1\7\21\0\1\50\1\52\1\53\1\50\1\51\1\0"+
    "\1\52\1\61\6\52\1\62\22\52\2\50\1\0\1\54"+
    "\21\50\1\52\1\53\1\50\1\51\1\0\7\52\1\63"+
    "\6\52\1\64\14\52\2\50\1\0\1\54\21\50\1\52"+
    "\1\53\1\50\1\51\1\0\14\52\1\65\16\52\2\50"+
    "\1\0\1\54\21\50\1\52\1\53\1\50\1\51\1\0"+
    "\16\52\1\66\14\52\2\50\1\0\1\54\21\50\1\52"+
    "\1\53\1\50\1\51\1\0\10\52\1\67\22\52\2\50"+
    "\1\0\1\54\21\50\1\52\1\53\1\50\1\51\1\0"+
    "\14\52\1\70\16\52\2\50\1\0\1\54\21\50\1\52"+
    "\1\53\1\50\1\51\1\0\13\52\1\71\17\52\2\50"+
    "\1\0\1\54\21\50\1\52\1\53\1\50\1\51\1\0"+
    "\14\52\1\72\4\52\1\73\6\52\1\74\2\52\2\50"+
    "\1\0\1\54\21\50\1\52\1\53\1\50\1\51\1\0"+
    "\13\52\1\75\2\52\1\76\14\52\2\50\1\0\1\54"+
    "\21\50\1\52\1\53\1\50\1\51\1\0\13\52\1\77"+
    "\3\52\1\100\13\52\2\50\1\0\1\54\21\50\1\52"+
    "\1\53\1\50\1\51\1\0\13\52\1\101\17\52\2\50"+
    "\1\0\1\54\21\50\1\52\1\53\1\50\1\51\1\0"+
    "\7\52\1\102\1\52\1\103\21\52\2\50\1\0\1\54"+
    "\24\50\1\51\1\0\33\50\1\104\1\50\1\0\21\50"+
    "\5\25\1\0\57\25\3\0\1\7\1\0\1\7\35\0"+
    "\1\7\1\105\20\0\1\50\2\54\1\50\1\51\1\0"+
    "\33\54\2\50\1\106\1\54\24\50\1\51\1\0\35\50"+
    "\1\0\1\50\1\107\23\50\1\51\1\0\35\50\1\0"+
    "\2\50\1\110\22\50\1\51\1\0\35\50\1\0\3\50"+
    "\1\111\21\50\1\51\1\0\35\50\1\0\4\50\1\112"+
    "\20\50\1\51\1\0\35\50\1\0\4\50\1\113\1\114"+
    "\17\50\1\51\1\0\35\50\1\0\4\50\1\115\20\50"+
    "\1\51\1\0\35\50\1\0\16\50\1\116\6\50\1\51"+
    "\1\0\35\50\1\0\17\50\1\117\1\50\65\0\1\50"+
    "\1\120\1\121\1\50\1\51\1\0\33\120\2\50\1\0"+
    "\1\54\21\50\1\122\1\121\1\50\1\51\1\0\33\122"+
    "\2\50\1\0\1\54\21\50\2\54\1\50\1\51\1\0"+
    "\33\54\2\50\1\0\1\54\21\50\1\54\1\123\1\50"+
    "\1\51\1\0\33\54\2\50\1\0\1\54\20\50\4\0"+
    "\1\124\60\0\4\56\1\125\1\0\34\56\1\60\22\56"+
    "\1\50\1\120\1\121\1\50\1\51\1\0\2\120\1\126"+
    "\30\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\11\120\1\127\21\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\10\120\1\130"+
    "\22\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\24\120\1\131\6\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\32\120\1\132"+
    "\2\50\1\0\1\54\21\50\1\120\1\121\1\50\1\51"+
    "\1\0\1\133\6\120\1\134\23\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\13\120\1\135"+
    "\17\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\14\120\1\136\16\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\17\120\1\137"+
    "\13\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\12\120\1\140\20\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\16\120\1\141"+
    "\14\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\23\120\1\142\7\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\16\120\1\143"+
    "\14\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\14\120\1\144\16\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\10\120\1\145"+
    "\22\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\16\120\1\146\14\120\2\50\1\0\1\54"+
    "\21\50\1\120\1\121\1\50\1\51\1\0\21\120\1\147"+
    "\11\120\2\50\1\0\1\54\21\50\1\120\1\121\1\50"+
    "\1\51\1\0\20\120\1\150\12\120\2\50\1\0\1\54"+
    "\20\50\5\104\1\0\57\104\43\0\1\106\21\0\1\50"+
    "\1\151\1\152\1\50\1\51\1\0\33\151\2\50\1\0"+
    "\1\54\21\50\1\153\1\152\1\50\1\51\1\0\33\153"+
    "\2\50\1\0\1\54\21\50\2\153\1\50\1\51\1\0"+
    "\33\153\2\50\1\0\21\50\4\124\1\57\1\0\57\124"+
    "\4\154\1\155\1\0\34\154\1\156\22\154\1\50\1\151"+
    "\1\152\1\50\1\51\1\0\3\151\1\157\27\151\2\50"+
    "\1\0\1\54\21\50\1\151\1\152\1\50\1\51\1\0"+
    "\12\151\1\160\20\151\2\50\1\0\1\54\21\50\1\151"+
    "\1\152\1\50\1\51\1\0\25\151\1\161\5\151\2\50"+
    "\1\0\1\54\21\50\1\151\1\152\1\50\1\51\1\0"+
    "\13\151\1\162\17\151\2\50\1\0\1\54\21\50\1\151"+
    "\1\152\1\50\1\51\1\0\20\151\1\163\12\151\2\50"+
    "\1\0\1\54\21\50\1\151\1\152\1\50\1\51\1\0"+
    "\12\151\1\164\20\151\2\50\1\0\1\54\21\50\1\151"+
    "\1\152\1\50\1\51\1\0\16\151\1\165\14\151\2\50"+
    "\1\0\1\54\21\50\1\151\1\152\1\50\1\51\1\0"+
    "\10\151\1\166\22\151\2\50\1\0\1\54\21\50\1\151"+
    "\1\152\1\50\1\51\1\0\12\151\1\167\20\151\2\50"+
    "\1\0\1\54\21\50\1\151\1\152\1\50\1\51\1\0"+
    "\1\170\32\151\2\50\1\0\1\54\21\50\1\151\1\152"+
    "\1\50\1\51\1\0\10\151\1\171\22\151\2\50\1\0"+
    "\1\54\21\50\1\151\1\152\1\50\1\51\1\0\11\151"+
    "\1\172\21\151\2\50\1\0\1\54\21\50\1\151\1\152"+
    "\1\50\1\51\1\0\13\151\1\173\17\151\2\50\1\0"+
    "\1\54\21\50\1\151\1\152\1\50\1\51\1\0\14\151"+
    "\1\174\16\151\2\50\1\0\1\54\21\50\1\151\1\152"+
    "\1\50\1\51\1\0\17\151\1\175\13\151\2\50\1\0"+
    "\1\54\21\50\1\151\1\152\1\50\1\51\1\0\7\151"+
    "\1\176\23\151\2\50\1\0\1\54\21\50\2\177\1\50"+
    "\1\51\1\0\33\177\2\50\1\0\1\54\21\50\1\200"+
    "\1\177\1\50\1\51\1\0\33\200\2\50\1\0\1\54"+
    "\21\50\2\200\1\50\1\51\1\0\33\200\2\50\1\0"+
    "\21\50\4\154\1\201\1\0\34\154\1\156\26\154\1\202"+
    "\1\0\34\154\1\156\22\154\1\50\2\177\1\50\1\51"+
    "\1\0\1\177\1\203\31\177\2\50\1\0\1\54\21\50"+
    "\2\177\1\50\1\51\1\0\17\177\1\204\13\177\2\50"+
    "\1\0\1\54\21\50\2\177\1\50\1\51\1\0\13\177"+
    "\1\205\17\177\2\50\1\0\1\54\21\50\2\177\1\50"+
    "\1\51\1\0\10\177\1\206\22\177\2\50\1\0\1\54"+
    "\21\50\2\177\1\50\1\51\1\0\13\177\1\207\17\177"+
    "\2\50\1\0\1\54\21\50\2\177\1\50\1\51\1\0"+
    "\31\177\1\210\1\177\2\50\1\0\1\54\21\50\2\177"+
    "\1\50\1\51\1\0\13\177\1\211\17\177\2\50\1\0"+
    "\1\54\21\50\2\177\1\50\1\51\1\0\14\177\1\212"+
    "\16\177\2\50\1\0\1\54\21\50\2\177\1\50\1\51"+
    "\1\0\17\177\1\213\13\177\2\50\1\0\1\54\21\50"+
    "\2\177\1\50\1\51\1\0\7\177\1\214\23\177\2\50"+
    "\1\0\1\54\21\50\2\215\1\50\1\51\1\0\33\215"+
    "\2\50\1\0\1\54\21\50\2\215\1\50\1\51\1\0"+
    "\33\215\2\50\1\0\22\50\2\215\1\50\1\51\1\0"+
    "\4\215\1\216\26\215\2\50\1\0\1\54\21\50\2\215"+
    "\1\50\1\51\1\0\16\215\1\217\14\215\2\50\1\0"+
    "\1\54\21\50\2\215\1\50\1\51\1\0\11\215\1\220"+
    "\21\215\2\50\1\0\1\54\21\50\2\215\1\50\1\51"+
    "\1\0\11\215\1\221\21\215\2\50\1\0\1\54\21\50"+
    "\2\215\1\50\1\51\1\0\26\215\1\222\4\215\2\50"+
    "\1\0\1\54\21\50\2\215\1\50\1\51\1\0\17\215"+
    "\1\223\13\215\2\50\1\0\1\54\21\50\2\215\1\50"+
    "\1\51\1\0\7\215\1\224\23\215\2\50\1\0\1\54"+
    "\21\50\2\215\1\50\1\51\1\0\22\215\1\225\10\215"+
    "\2\50\1\0\1\54\21\50\2\215\1\50\1\51\1\0"+
    "\10\215\1\226\22\215\2\50\1\0\1\54\20\50\4\227"+
    "\1\51\1\0\35\227\1\0\25\227\1\51\1\0\5\227"+
    "\1\230\27\227\1\0\25\227\1\51\1\0\13\227\1\231"+
    "\21\227\1\0\25\227\1\51\1\0\7\227\1\232\25\227"+
    "\1\0\25\227\1\51\1\0\10\227\1\233\24\227\1\0"+
    "\25\227\1\51\1\0\7\227\1\234\25\227\1\0\25\227"+
    "\1\51\1\0\4\227\1\235\30\227\1\0\25\227\1\51"+
    "\1\0\10\227\1\236\24\227\1\0\25\227\1\51\1\0"+
    "\21\227\1\237\13\227\1\0\21\227";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6042];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\46\1\1\0\1\11\34\1\1\11\15\1\1\0"+
    "\27\1\1\0\1\1\1\0\22\1\1\11\36\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public int getLine() {
    return yyline;
    }
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Identificador;
          }
        case 51: break;
        case 13: 
          { lexeme=yytext(); return Menor;
          }
        case 52: break;
        case 25: 
          { lexeme=yytext(); return MayorIgual;
          }
        case 53: break;
        case 14: 
          { lexeme=yytext(); return PuntoYComa;
          }
        case 54: break;
        case 27: 
          { lexeme=yytext(); return Diferente;
          }
        case 55: break;
        case 43: 
          { lexeme=yytext(); return Inicio;
          }
        case 56: break;
        case 39: 
          { lexeme=yytext(); return SiNo;
          }
        case 57: break;
        case 50: 
          { lexeme=yytext(); return Mientras;
          }
        case 58: break;
        case 18: 
          { lexeme=yytext(); return DosPuntos;
          }
        case 59: break;
        case 15: 
          { lexeme=yytext(); return CierraCorchete;
          }
        case 60: break;
        case 26: 
          { lexeme=yytext(); return MenorIgual;
          }
        case 61: break;
        case 45: 
          { lexeme=yytext(); return String;
          }
        case 62: break;
        case 16: 
          { lexeme=yytext(); return AbreCorchete;
          }
        case 63: break;
        case 23: 
          { lexeme=yytext(); return Or;
          }
        case 64: break;
        case 6: 
          { lexeme=yytext(); return Division;
          }
        case 65: break;
        case 49: 
          { lexeme=yytext(); return Escribir;
          }
        case 66: break;
        case 48: 
          { lexeme=yytext(); return Prog;
          }
        case 67: break;
        case 7: 
          { lexeme=yytext(); return Comentario;
          }
        case 68: break;
        case 5: 
          { /* Ignore */
          }
        case 69: break;
        case 20: 
          { lexeme=yytext(); return AbreParentesis;
          }
        case 70: break;
        case 32: 
          { lexeme=yytext(); return Var;
          }
        case 71: break;
        case 37: 
          { lexeme=yytext(); return Real;
          }
        case 72: break;
        case 36: 
          { lexeme=yytext(); return Vexy;
          }
        case 73: break;
        case 21: 
          { lexeme=yytext(); return Negacion;
          }
        case 74: break;
        case 31: 
          { lexeme=yytext(); return Reales;
          }
        case 75: break;
        case 22: 
          { lexeme=yytext(); return Cadena;
          }
        case 76: break;
        case 41: 
          { lexeme=yytext(); return Hasta;
          }
        case 77: break;
        case 29: 
          { lexeme=yytext(); return LogicoAND;
          }
        case 78: break;
        case 3: 
          { lexeme=yytext(); return Enteros;
          }
        case 79: break;
        case 40: 
          { lexeme=yytext(); return Hola;
          }
        case 80: break;
        case 9: 
          { lexeme=yytext(); return Resta;
          }
        case 81: break;
        case 12: 
          { lexeme=yytext(); return Mayor;
          }
        case 82: break;
        case 35: 
          { lexeme=yytext(); return Proc;
          }
        case 83: break;
        case 38: 
          { lexeme=yytext(); return Leer;
          }
        case 84: break;
        case 47: 
          { lexeme=yytext(); return Limpiar;
          }
        case 85: break;
        case 1: 
          { lexeme=yytext(); return ERROR;
          }
        case 86: break;
        case 24: 
          { lexeme=yytext(); return Si;
          }
        case 87: break;
        case 10: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 88: break;
        case 19: 
          { lexeme=yytext(); return CierraParentesis;
          }
        case 89: break;
        case 44: 
          { lexeme=yytext(); return Entero;
          }
        case 90: break;
        case 30: 
          { lexeme=yytext(); return LogicoOR;
          }
        case 91: break;
        case 33: 
          { lexeme=yytext(); return And;
          }
        case 92: break;
        case 28: 
          { lexeme=yytext(); return DosPuntosIgual;
          }
        case 93: break;
        case 11: 
          { lexeme=yytext(); return Igual;
          }
        case 94: break;
        case 17: 
          { lexeme=yytext(); return Coma;
          }
        case 95: break;
        case 46: 
          { lexeme=yytext(); return Ejecuta;
          }
        case 96: break;
        case 4: 
          { /*Ignore*/
          }
        case 97: break;
        case 34: 
          { lexeme=yytext(); return Final;
          }
        case 98: break;
        case 8: 
          { lexeme=yytext(); return Suma;
          }
        case 99: break;
        case 42: 
          { lexeme=yytext(); return Repite;
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
